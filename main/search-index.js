var searchIndex = JSON.parse('{\
"budget_executor":{"doc":"An approach to “throttling” async tasks in Rust using …","t":[3,8,3,0,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,0,11,11,11,11,11,11,11,0,0,3,13,3,3,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,13,3,3,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,0,13,3,13,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,3,13,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,0,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11],"n":["BudgetResult","Budgetable","ReplenishableBudget","asynchronous","balance","blocking","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","fmt","fmt","from","from","into","into","new","output","remaining","replenish","spend","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","singlethreaded","threadsafe","BudgetedFuture","Complete","Context","IncompleteFuture","NoBudget","Progress","WaitForBudgetFuture","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","budget","continue_with_additional_budget","from","from","from","from","from","into","into","into","into","into","into_future","into_future","poll","poll","run_with_budget","spend","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wait_for_budget","0","0","BudgetedFuture","Complete","Context","IncompleteFuture","NoBudget","Progress","WaitForBudgetFuture","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","budget","continue_with_additional_budget","from","from","from","from","from","into","into","into","into","into","into_future","into_future","poll","poll","run_with_budget","spend","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wait_for_budget","0","0","singlethreaded","threadsafe","Complete","IncompleteFuture","NoBudget","Progress","Runtime","TaskHandle","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","budget","clone","clone_into","continue_with_additional_budget","fmt","from","from","from","from","into","into","into","into","into_future","poll","run_with_budget","spawn","spend","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wait_for_budget","wait_until_complete","0","0","Complete","IncompleteFuture","NoBudget","Progress","Runtime","TaskHandle","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","budget","clone","clone_into","continue_with_additional_budget","fmt","from","from","from","from","into","into","into","into","into_future","poll","run_with_budget","spawn","spend","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wait_for_budget","wait_until_complete","0","0","singlethreaded","threadsafe","SpendBudget","borrow","borrow_mut","fmt","from","into","into_future","poll","try_from","try_into","type_id","SpendBudget","borrow","borrow_mut","fmt","from","into","into_future","poll","try_from","try_into","type_id"],"q":["budget_executor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budget_executor::asynchronous","","budget_executor::asynchronous::singlethreaded","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budget_executor::asynchronous::singlethreaded::Progress","","budget_executor::asynchronous::threadsafe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budget_executor::asynchronous::threadsafe::Progress","","budget_executor::blocking","","budget_executor::blocking::singlethreaded","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budget_executor::blocking::singlethreaded::Progress","","budget_executor::blocking::threadsafe","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budget_executor::blocking::threadsafe::Progress","","budget_executor::spend","","budget_executor::spend::singlethreaded","","","","","","","","","","","budget_executor::spend::threadsafe","","","","","","","","","",""],"d":["The result of a completed future.","A type that can be used as a budget.","An atomic budget storage that can be replenished by other …","A budget implementation compatible with any async executor.","The budget after completing the future.","A standalone implementation does not require another async …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a new instance with the intiial budget provided.","The output of the future.","Returns the remaining budget.","Adds <code>amount</code> to the budget. This will wake up the task if …","Shared implementation of budget spending.","","","","","","","","A single-threaded (<code>!Send + !Sync</code>), asynchronous budgeting …","A threadsafe (<code>Send + Sync</code>), asynchronous budgeting …","Executes a future with a given budget when awaited.","The future has completed.","A budget-limited asynchronous context.","A future that was budgeted using <code>Context::run_with_budget()</code>","The future was interrupted because it requested to spend …","The progress of a future’s execution.","A future that waits for additional budget to be allocated …","","","","","","","","","","","Retrieves the current budget.","Adds <code>additional_budget</code> to the remaining balance and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Executes <code>future</code> with the provided budget. The future will …","Spends <code>amount</code> from the curent budget.","","","","","","","","","","","","","","","","Waits for additional budget to be allocated through …","","","Executes a future with a given budget when awaited.","The future has completed.","A budget-limited asynchronous context.","A future that was budgeted using <code>Context::run_with_budget()</code>","The future was interrupted because it requested to spend …","The progress of a future’s execution.","A future that waits for additional budget to be allocated …","","","","","","","","","","","Retrieves the current budget.","Adds <code>additional_budget</code> to the remaining balance and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Executes <code>future</code> with the provided budget. The future will …","Spends <code>amount</code> from the curent budget.","","","","","","","","","","","","","","","","Waits for additional budget to be allocated through …","","","A single-threaded (<code>!Send + !Sync</code>), blocking budgeting …","A threadsafe (<code>Send + Sync</code>), blocking budgeting …","The future has completed.","A future that was budgeted with <code>Runtime::run_with_budget()</code> …","The future was interrupted because it requested to spend …","The progress of a future’s execution.","A lightweight asynchronous runtime that runs a future while","A handle to a task scheduled with a <code>Runtime</code>. Invoking …","","","","","","","","","Retrieves the current budget.","","","Adds <code>additional_budget</code> to the remaining balance and …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Executes <code>future</code> with the provided budget. The future will …","Schedules <code>future</code> to run.","Spends <code>amount</code> from the curent budget.","","","","","","","","","","","","","","Waits for additional budget to be allocated through …","Continues executing the contained future until it is …","","","The future has completed.","A future that was budgeted with <code>Runtime::run_with_budget()</code> …","The future was interrupted because it requested to spend …","The progress of a future’s execution.","A lightweight asynchronous runtime that runs a future while","A handle to a task scheduled with a <code>Runtime</code>. Invoking …","","","","","","","","","Retrieves the current budget.","","","Adds <code>additional_budget</code> to the remaining balance and …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Executes <code>future</code> with the provided budget. The future will …","Schedules <code>future</code> to run.","Spends <code>amount</code> from the curent budget.","","","","","","","","","","","","","","Waits for additional budget to be allocated through …","Continues executing the contained future until it is …","","","Single-threaded (<code>!Send + !Sync</code>) budget spending","Threadsafe (<code>Send + Sync</code>) budget spending","Spends <code>amount</code> from the curent budget.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Spends <code>amount</code> from the curent budget.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,1,0,1,2,1,2,2,2,2,1,2,1,2,1,2,2,1,2,2,0,2,1,2,1,2,1,2,0,0,0,3,0,0,3,0,0,4,5,3,6,7,4,5,3,6,7,4,6,4,5,3,6,7,4,5,3,6,7,5,7,5,7,4,4,4,5,3,6,7,4,5,3,6,7,4,5,3,6,7,6,8,9,0,10,0,0,10,0,0,11,12,10,13,14,11,12,10,13,14,11,13,11,12,10,13,14,11,12,10,13,14,12,14,12,14,11,11,11,12,10,13,14,11,12,10,13,14,11,12,10,13,14,13,15,16,0,0,17,0,17,0,0,0,17,18,19,20,17,18,19,20,20,20,20,18,20,17,18,19,20,17,18,19,20,19,19,20,20,20,20,17,18,19,20,17,18,19,20,17,18,19,20,18,17,21,22,23,0,23,0,0,0,23,24,25,26,23,24,25,26,26,26,26,24,26,23,24,25,26,23,24,25,26,25,25,26,26,26,26,23,24,25,26,23,24,25,26,23,24,25,26,24,23,27,28,0,0,0,29,29,29,29,29,29,29,29,29,29,0,30,30,30,30,30,30,30,30,30,30],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["replenishablebudget",3]],["replenishablebudget",3]],[[["",0],["",0]]],[[],["replenishablebudget",3]],[[["budgetresult",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["replenishablebudget",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["usize",0]],["replenishablebudget",3]],null,[[["replenishablebudget",3]],["usize",0]],[[["replenishablebudget",3],["usize",0]]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["context",3]],["usize",0]],[[["incompletefuture",3],["usize",0]],["budgetedfuture",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pin",3,[["budgetedfuture",3]]],["context",3]],["poll",4]],[[["pin",3,[["waitforbudgetfuture",3]]],["context",3]],["poll",4]],[[["fnonce",8]],["budgetedfuture",3]],[[["context",3],["usize",0]],["spendbudget",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["incompletefuture",3]],["waitforbudgetfuture",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["context",3]],["usize",0]],[[["incompletefuture",3],["usize",0]],["budgetedfuture",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pin",3,[["budgetedfuture",3]]],["context",3]],["poll",4]],[[["pin",3,[["waitforbudgetfuture",3]]],["context",3]],["poll",4]],[[["fnonce",8]],["budgetedfuture",3]],[[["context",3],["usize",0]],["spendbudget",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["incompletefuture",3]],["waitforbudgetfuture",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["runtime",3]],["usize",0]],[[["runtime",3,[["clone",8]]]],["runtime",3,[["clone",8]]]],[[["",0],["",0]]],[[["incompletefuture",3],["usize",0]],["progress",4]],[[["runtime",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pin",3,[["taskhandle",3]]],["context",3]],["poll",4]],[[["fnonce",8]],["progress",4]],[[["runtime",3],["future",8]],["taskhandle",3]],[[["runtime",3],["usize",0]],["spendbudget",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["incompletefuture",3]],["progress",4]],[[["progress",4]],["budgetresult",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["runtime",3]],["usize",0]],[[["runtime",3,[["clone",8]]]],["runtime",3,[["clone",8]]]],[[["",0],["",0]]],[[["incompletefuture",3],["usize",0]],["progress",4]],[[["runtime",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pin",3,[["taskhandle",3]]],["context",3]],["poll",4]],[[["fnonce",8]],["progress",4]],[[["runtime",3],["future",8]],["taskhandle",3]],[[["runtime",3],["usize",0]],["spendbudget",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["incompletefuture",3]],["progress",4]],[[["progress",4]],["budgetresult",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["spendbudget",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["pin",3,[["spendbudget",3]]],["context",3]],["poll",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["spendbudget",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["pin",3,[["spendbudget",3]]],["context",3]],["poll",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"BudgetResult"],[3,"ReplenishableBudget"],[4,"Progress"],[3,"Context"],[3,"BudgetedFuture"],[3,"IncompleteFuture"],[3,"WaitForBudgetFuture"],[13,"NoBudget"],[13,"Complete"],[4,"Progress"],[3,"Context"],[3,"BudgetedFuture"],[3,"IncompleteFuture"],[3,"WaitForBudgetFuture"],[13,"NoBudget"],[13,"Complete"],[4,"Progress"],[3,"IncompleteFuture"],[3,"TaskHandle"],[3,"Runtime"],[13,"NoBudget"],[13,"Complete"],[4,"Progress"],[3,"IncompleteFuture"],[3,"TaskHandle"],[3,"Runtime"],[13,"NoBudget"],[13,"Complete"],[3,"SpendBudget"],[3,"SpendBudget"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
