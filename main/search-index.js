var searchIndex = JSON.parse('{\
"budget_executor":{"doc":"An approach to “throttling” async tasks in Rust using …","t":[3,8,3,3,0,12,0,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,11,11,11,11,11,11,11,11,11,11,3,13,3,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,3,13,4,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,12,12],"n":["BudgetResult","Budgetable","ReplenishableBudget","SpendBudget","asynchronous","balance","blocking","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","budget","clone","clone_into","default","fmt","fmt","fmt","from","from","from","into","into","into","into_future","new","output","poll","replenish","spend","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BudgetedFuture","Complete","IncompleteAsyncFuture","NoBudget","Progress","WaitForBudgetFuture","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","continue_with_additional_budget","from","from","from","from","into","into","into","into","into_future","into_future","poll","poll","run_with_budget","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wait_for_budget","0","0","Complete","IncompleteFuture","NoBudget","Progress","borrow","borrow","borrow_mut","borrow_mut","continue_with_additional_budget","from","from","into","into","run_with_budget","try_from","try_from","try_into","try_into","type_id","type_id","wait_for_budget","0","0"],"q":["budget_executor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budget_executor::asynchronous","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budget_executor::asynchronous::Progress","","budget_executor::blocking","","","","","","","","","","","","","","","","","","","","","budget_executor::blocking::Progress",""],"d":["The result of a completed future.","A type that can be used as a budget.","An atomic budget storage that can be replenished by other …","Spends <code>amount</code> from the curent budget.","A budget implementation compatible with any async executor.","The budget after completing the future.","A standalone implementation does not require another async …","","","","","","","Retrieves the current budget.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns a new instance with the intiial budget provided.","The output of the future.","","Adds <code>amount</code> to the budget. This will wake up the task if …","Spends <code>amount</code> from the curent budget.","","","","","","","","","","","Executes a future with a given budget when awaited.","The future has completed.","A future that was budgeted using <code>run_with_budget()</code> that has","The future was interrupted because it requested to spend …","The progress of a future’s execution.","A future that waits for additional budget to be allocated …","","","","","","","","","Adds <code>additional_budget</code> to the remaining balance and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Executes <code>future</code> with the provided budget. The future will …","","","","","","","","","","","","","Waits for additional budget to be allocated through …","","","The future has completed.","A future that was budgeted with <code>run_with_budget()</code> that has …","The future was interrupted because it requested to spend …","The progress of a future’s execution.","","","","","Adds <code>additional_budget</code> to the remaining balance and …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Executes <code>future</code> with the provided budget. The future will …","","","","","","","Waits for additional budget to be allocated through …","",""],"i":[0,0,0,0,0,1,0,1,2,3,1,2,3,0,3,3,3,1,2,3,1,2,3,1,2,3,2,3,1,2,3,0,3,1,2,3,1,2,3,1,2,3,0,4,0,4,0,0,5,4,6,7,5,4,6,7,6,5,4,6,7,5,4,6,7,5,7,5,7,0,5,4,6,7,5,4,6,7,5,4,6,7,6,8,9,10,0,10,0,11,10,11,10,11,11,10,11,10,0,11,10,11,10,11,10,11,12,13],"f":[null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["option",4,[["usize",0]]]],[[["replenishablebudget",3]],["replenishablebudget",3]],[[["",0],["",0]]],[[],["replenishablebudget",3]],[[["budgetresult",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["spendbudget",3],["formatter",3]],["result",6]],[[["replenishablebudget",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]],["replenishablebudget",3]],null,[[["pin",3,[["spendbudget",3]]],["context",3]],["poll",4]],[[["replenishablebudget",3],["usize",0]]],[[["usize",0]],["spendbudget",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["incompleteasyncfuture",3],["usize",0]],["budgetedfuture",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pin",3,[["budgetedfuture",3]]],["context",3]],["poll",4]],[[["pin",3,[["waitforbudgetfuture",3]]],["context",3]],["poll",4]],[[["future",8],["budgetable",8]],["budgetedfuture",3,[["budgetable",8],["future",8]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["incompleteasyncfuture",3,[["replenishablebudget",3]]]],["waitforbudgetfuture",3,[["replenishablebudget",3]]]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["incompletefuture",3],["usize",0]],["progress",4]],[[]],[[]],[[]],[[]],[[["future",8],["budgetable",8]],["progress",4,[["budgetable",8],["future",8]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["incompletefuture",3,[["replenishablebudget",3]]]],["progress",4,[["replenishablebudget",3]]]],null,null],"p":[[3,"BudgetResult"],[3,"SpendBudget"],[3,"ReplenishableBudget"],[4,"Progress"],[3,"BudgetedFuture"],[3,"IncompleteAsyncFuture"],[3,"WaitForBudgetFuture"],[13,"NoBudget"],[13,"Complete"],[4,"Progress"],[3,"IncompleteFuture"],[13,"NoBudget"],[13,"Complete"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
